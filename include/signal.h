// (c) 2025 FRINKnet & Friends – MIT licence
#ifndef _SIGNAL_H
#define _SIGNAL_H

#include <sys/types.h>

// C23 version identification (required by C23 §7.14)
#if __STDC_VERSION__ >= 202311L
#define __STDC_VERSION_SIGNAL_H__ 202311L
#endif

#include <stddef.h>
#include <sys/types.h>

// Include errno.h for POSIX functions that set errno
#if defined(_POSIX_C_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE) || !defined(__STRICT_ANSI__)
#include <errno.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

// — Core ISO C Types (C99+) —
typedef int sig_atomic_t;								/* C99 §7.14: Atomic signal access type */
typedef void (*__sighandler_t)(int);		/* Signal handler function type */

// Implementation-defined signal handler type name
#if defined(__GNUC__) || defined(__clang__) || defined(_GNU_SOURCE)
typedef __sighandler_t sig_t;						/* BSD/GNU extension */
#else
typedef void (*sig_t)(int);							/* Generic fallback */
#endif

// — ISO C Signal Handler Constants (C99+) —
#define SIG_DFL  ((__sighandler_t) 0)		/* Default signal handling */
#define SIG_IGN  ((__sighandler_t) 1)		/* Ignore signal */
#define SIG_ERR  ((__sighandler_t) -1)	/* Error return from signal() */

// — ISO C Standard Signals (C99 §7.14.3) —
#define SIGABRT  6		/* Abnormal termination */
#define SIGFPE	 8		/* Floating-point exception */
#define SIGILL	 4		/* Illegal instruction */
#define SIGINT	 2		/* Interactive attention signal */
#define SIGSEGV  11		/* Invalid memory access */
#define SIGTERM  15		/* Termination request */

// — POSIX Extensions (when feature test macros are defined) —
#if defined(_POSIX_C_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE) || !defined(__STRICT_ANSI__)

// POSIX types
typedef unsigned long sigset_t;

// Additional POSIX signals (verified against Linux standards)
#define SIGHUP	 1		/* Hangup */
#define SIGQUIT  3		/* Quit */
#define SIGTRAP  5		/* Trace trap */
#define SIGBUS	 7		/* Bus error */
#define SIGKILL  9		/* Kill, unblockable */
#define SIGUSR1  10		/* User-defined signal 1 */
#define SIGUSR2  12		/* User-defined signal 2 */
#define SIGPIPE  13		/* Broken pipe */
#define SIGALRM  14		/* Alarm clock */
#define SIGCHLD  17		/* Child status has changed */
#define SIGCONT  18		/* Continue */
#define SIGSTOP  19		/* Stop, unblockable */
#define SIGTSTP  20		/* Keyboard stop */
#define SIGTTIN  21		/* Background read from tty */
#define SIGTTOU  22		/* Background write to tty */
#define SIGURG	 23		/* Urgent condition on socket */
#define SIGXCPU  24		/* CPU limit exceeded */
#define SIGXFSZ  25		/* File size limit exceeded */

// Real-time signals
#define SIGRTMIN 34
#define SIGRTMAX 64

// Signal mask operations
#define SIG_BLOCK		 0
#define SIG_UNBLOCK  1
#define SIG_SETMASK  2

// Signal action flags
#define SA_NOCLDSTOP	0x00000001	/* Don't send SIGCHLD when children stop */
#define SA_NOCLDWAIT	0x00000002	/* Don't create zombie processes */
#define SA_SIGINFO		0x00000004	/* Invoke signal-catching function with three args */
#define SA_RESTART		0x10000000	/* Restart functions if interrupted by handler */
#define SA_NODEFER		0x40000000	/* Don't automatically block the signal */
#define SA_RESETHAND	0x80000000	/* Reset to SIG_DFL on entry to handler */

// Signal information codes
#define SI_USER			 0		/* Signal sent by user */
#define SI_QUEUE		-1		/* Signal sent by sigqueue */
#define SI_TIMER		-2		/* Signal generated by timer expiration */
#define SI_ASYNCIO	-4		/* Signal generated by async I/O completion */
#define SI_MESGQ		-3		/* Signal generated by message queue */

// — Signal Value Union —
union sigval {
		int sival_int;				/* Integer signal value */
		void *sival_ptr;			/* Pointer signal value */
};

// — Signal Information Structure (Complete POSIX definition) —
typedef struct {
		int si_signo;					/* Signal number */
		int si_errno;					/* Errno value */
		int si_code;					/* Signal code */
		pid_t si_pid;					/* Sending process ID */
		uid_t si_uid;					/* Real user ID of sending process */
		void *si_addr;				/* Faulting instruction address */
		int si_status;				/* Exit value or signal */
		long si_band;					/* Band event for SIGPOLL */
		union sigval si_value; /* Signal value */
		int si_int;						/* POSIX.1b signal value (alias for si_value.sival_int) */
		void *si_ptr;					/* POSIX.1b signal value (alias for si_value.sival_ptr) */
		void *si_addr_lsb;		/* LSB of address for SIGBUS */
		short si_addr_bnd[2]; /* Address bounds for SIGBUS */
} siginfo_t;

// — Signal Action Structure (FIXED - separate fields, not union) —
struct sigaction {
		void (*sa_handler)(int);													 /* Signal handler */
		void (*sa_sigaction)(int, siginfo_t *, void *);		/* Extended signal handler */
		sigset_t sa_mask;																	 /* Signals blocked during handler */
		int sa_flags;																			 /* Signal action flags */
		void (*sa_restorer)(void);												 /* Obsolete restorer (Linux) */
};

// — Signal Event Structure —
struct sigevent {
		int sigev_notify;																	 /* Notification type */
		int sigev_signo;																	 /* Signal number */
		union sigval sigev_value;													 /* Signal value */
		void (*sigev_notify_function)(union sigval);			 /* Notification function */
		void *sigev_notify_attributes;										 /* Notification attributes */
};

// Event notification types
#define SIGEV_NONE	 0		/* No asynchronous notification */
#define SIGEV_SIGNAL 1		/* Queued signal notification */
#define SIGEV_THREAD 2		/* Notification function */

// — POSIX Function Declarations —
int kill(pid_t pid, int sig);
int sigaction(int sig, const struct sigaction *restrict act, struct sigaction *restrict oact);
int sigprocmask(int how, const sigset_t *restrict set, sigset_t *restrict oset);
int sigpending(sigset_t *set);
int sigsuspend(const sigset_t *sigmask);

// Signal set manipulation functions
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sigaddset(sigset_t *set, int signo);
int sigdelset(sigset_t *set, int signo);
int sigismember(const sigset_t *set, int signo);

// Advanced signal functions (require struct timespec from time.h)
int sigqueue(pid_t pid, int sig, const union sigval value);
int sigwait(const sigset_t *restrict set, int *restrict sig);
int sigwaitinfo(const sigset_t *restrict set, siginfo_t *restrict info);

// Forward declaration to avoid circular dependency with time.h
struct timespec;
int sigtimedwait(const sigset_t *restrict set, siginfo_t *restrict info,
								 const struct timespec *restrict timeout);

#else

typedef unsigned long sigset_t;

#endif /* POSIX extensions */

// — Core ISO C Functions (Always available in C99+) —
int raise(int sig);
sig_t signal(int sig, sig_t func);

// — C11+ Thread Safety Extensions —
#if __STDC_VERSION__ >= 201112L && !defined(__STDC_NO_THREADS__)

// Thread-safe signal operations (C11+)
#define signal_atomic_store(obj, val) ((void)(*(obj) = (val)))
#define signal_atomic_load(obj) (*(obj))

// Note: Thread-local variables should be in implementation files, not headers

#endif /* C11+ threading */

// — C23 Modern Features —
#if __STDC_VERSION__ >= 202311L

// C23 attribute support for deprecated functions
#define __JACLIBC_DEPRECATED [[deprecated]]

// C23 noreturn attribute for signal handlers that don't return
#define __JACLIBC_NORETURN [[noreturn]]

#else
#define __JACLIBC_DEPRECATED /* nothing */
#define __JACLIBC_NORETURN	 /* nothing */
#endif /* C23 */

// — Performance Optimizations (C99+ inline functions with safety checks) —
#if __STDC_VERSION__ >= 199901L && defined(_POSIX_C_SOURCE)

// Fast inline signal set operations for performance-critical code
static inline int __sigisemptyset(const sigset_t *set) {
		return set ? (*set == 0) : 0;
}

static inline void __sigemptyset_fast(sigset_t *set) {
		if (set) *set = 0;
}

static inline void __sigfillset_fast(sigset_t *set) {
		if (set) *set = ~0UL;
}

static inline int __sigaddset_fast(sigset_t *set, int sig) {
		if (!set || sig < 1 || sig > 32) return -1;
		*set |= (1UL << (sig - 1));
		return 0;
}

static inline int __sigdelset_fast(sigset_t *set, int sig) {
		if (!set || sig < 1 || sig > 32) return -1;
		*set &= ~(1UL << (sig - 1));
		return 0;
}

#endif /* C99+ inline optimizations */

#ifdef __cplusplus
}
#endif

#endif /* _SIGNAL_H */
